@startuml
class Goods{
# int weight
# int volume
+ Goods(int weight , int volume)
+ getWeight():int
+ getVolume():int
}
package transport{
interface Shipment{
+ add(Goods goods):void
+ cost():int
+ allGoods():List<Goods>
}

abstract class AbstractShipment{
# List<Goods> GoodsList
# int dist
# int qtd
+ Shipment(int dist)
+ add(Goods goods):void
# getCurrentQtd():int
+ {abstract} cost():int
# {abstract} getQtd(Goods good):int
# {abstract} getLimit():int
+ allGoods():List<Goods>
}

Shipment *.. AbstractShipment
abstract class AbstractGroundShipment{
# getQtd(Goods good):int
}
AbstractShipment <|-- AbstractGroundShipment

class Fluvial{
# static int LIMITE
+ cost():int
# getLimit():int
}
class Road{
# static int LIMITE
+ cost():int
# getLimit():int
}
AbstractGroundShipment <|-- Fluvial
AbstractGroundShipment <|-- Road

abstract class AbstractAirShipment{

# getQtd(Goods good):int
}
AbstractShipment <|-- AbstractAirShipment
AbstractAirShipment <|-- air
class air{
# static int LIMITE
+ cost():int
# getLimit():int
}
class urgent{
+ cost():int
}
air <|-- urgent
}
AbstractShipment -- Goods
@enduml